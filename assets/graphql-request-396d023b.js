import{F as P}from"./form-data-c8368213.js";import{e as S,i as $}from"./extract-files-b993d67a.js";import{p as j,a as x}from"./graphql-9eaaa955.js";import{c as w,C as M,b as R}from"./cross-fetch-ff4a750f.js";const v={parse:JSON.parse,stringify:JSON.stringify},F=e=>$(e)||e!==null&&typeof e=="object"&&typeof e.pipe=="function",O=(e,t,s,r=v)=>{const{clone:a,files:i}=S({query:e,variables:t,operationName:s},"",F);if(i.size===0){if(!Array.isArray(e))return r.stringify(a);if(typeof t<"u"&&!Array.isArray(t))throw new Error("Cannot create request body with given variable type, array expected");const c=e.reduce((d,f,h)=>(d.push({query:f,variables:t?t[h]:void 0}),d),[]);return r.stringify(c)}const u=typeof FormData>"u"?P:FormData,n=new u;n.append("operations",r.stringify(a));const o={};let l=0;return i.forEach(c=>{o[++l]=c}),n.append("map",r.stringify(o)),l=0,i.forEach((c,d)=>{n.append(`${++l}`,d)}),n},T=e=>e.toUpperCase(),D=e=>{const t={};return e.forEach((s,r)=>{t[r]=s}),t},z=(e,t,s)=>e.document?e:{document:e,variables:t,requestHeaders:s,signal:void 0},I=(e,t,s)=>e.query?e:{query:e,variables:t,requestHeaders:s,signal:void 0},L=(e,t)=>e.documents?e:{documents:e,requestHeaders:t,signal:void 0},H=e=>{var r,a;let t;const s=e.definitions.filter(i=>i.kind==="OperationDefinition");return s.length===1&&(t=(a=(r=s[0])==null?void 0:r.name)==null?void 0:a.value),t},b=e=>{if(typeof e=="string"){let s;try{const r=j(e);s=H(r)}catch{}return{query:e,operationName:s}}const t=H(e);return{query:x(e),operationName:t}};class m extends Error{constructor(t,s){const r=`${m.extractMessage(t)}: ${JSON.stringify({response:t,request:s})}`;super(r),Object.setPrototypeOf(this,m.prototype),this.response=t,this.request=s,typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,m)}static extractMessage(t){var s,r;return((r=(s=t.errors)==null?void 0:s[0])==null?void 0:r.message)??`GraphQL Error (Code: ${t.status})`}}const g=e=>{let t={};return e&&(typeof Headers<"u"&&e instanceof Headers||M&&R.Headers&&e instanceof R.Headers?t=D(e):Array.isArray(e)?e.forEach(([s,r])=>{s&&r!==void 0&&(t[s]=r)}):t=e),t},E=e=>e.replace(/([\s,]|#[^\n\r]+)+/g," ").trim(),U=e=>{if(!Array.isArray(e.query)){const r=e,a=[`query=${encodeURIComponent(E(r.query))}`];return e.variables&&a.push(`variables=${encodeURIComponent(r.jsonSerializer.stringify(r.variables))}`),r.operationName&&a.push(`operationName=${encodeURIComponent(r.operationName)}`),a.join("&")}if(typeof e.variables<"u"&&!Array.isArray(e.variables))throw new Error("Cannot create query with given variable type, array expected");const t=e,s=e.query.reduce((r,a,i)=>(r.push({query:E(a),variables:t.variables?t.jsonSerializer.stringify(t.variables[i]):void 0}),r),[]);return`query=${encodeURIComponent(t.jsonSerializer.stringify(s))}`},k=e=>async t=>{const{url:s,query:r,variables:a,operationName:i,fetch:u,fetchOptions:n,middleware:o}=t,l={...t.headers};let c="",d;e==="POST"?(d=O(r,a,i,n.jsonSerializer),typeof d=="string"&&(l["Content-Type"]="application/json")):c=U({query:r,variables:a,operationName:i,jsonSerializer:n.jsonSerializer??v});const f={method:e,headers:l,body:d,...n};let h=s,q=f;if(o){const p=await Promise.resolve(o({...f,url:s,operationName:i,variables:a})),{url:y,...N}=p;h=y,q=N}return c&&(h=`${h}?${c}`),await u(h,q)};class K{constructor(t,s={}){this.url=t,this.requestConfig=s,this.rawRequest=async(...r)=>{const[a,i,u]=r,n=I(a,i,u),{headers:o,fetch:l=w,method:c="POST",requestMiddleware:d,responseMiddleware:f,...h}=this.requestConfig,{url:q}=this;n.signal!==void 0&&(h.signal=n.signal);const{operationName:p}=b(n.query);return C({url:q,query:n.query,variables:n.variables,headers:{...g(A(o)),...g(n.requestHeaders)},operationName:p,fetch:l,method:c,fetchOptions:h,middleware:d}).then(y=>(f&&f(y),y)).catch(y=>{throw f&&f(y),y})}}async request(t,...s){const[r,a]=s,i=z(t,r,a),{headers:u,fetch:n=w,method:o="POST",requestMiddleware:l,responseMiddleware:c,...d}=this.requestConfig,{url:f}=this;i.signal!==void 0&&(d.signal=i.signal);const{query:h,operationName:q}=b(i.document);return C({url:f,query:h,variables:i.variables,headers:{...g(A(u)),...g(i.requestHeaders)},operationName:q,fetch:n,method:o,fetchOptions:d,middleware:l}).then(p=>(c&&c(p),p.data)).catch(p=>{throw c&&c(p),p})}batchRequests(t,s){const r=L(t,s),{headers:a,...i}=this.requestConfig;r.signal!==void 0&&(i.signal=r.signal);const u=r.documents.map(({document:o})=>b(o).query),n=r.documents.map(({variables:o})=>o);return C({url:this.url,query:u,variables:n,headers:{...g(A(a)),...g(r.requestHeaders)},operationName:void 0,fetch:this.requestConfig.fetch??w,method:this.requestConfig.method||"POST",fetchOptions:i,middleware:this.requestConfig.requestMiddleware}).then(o=>(this.requestConfig.responseMiddleware&&this.requestConfig.responseMiddleware(o),o.data)).catch(o=>{throw this.requestConfig.responseMiddleware&&this.requestConfig.responseMiddleware(o),o})}setHeaders(t){return this.requestConfig.headers=t,this}setHeader(t,s){const{headers:r}=this.requestConfig;return r?r[t]=s:this.requestConfig.headers={[t]:s},this}setEndpoint(t){return this.url=t,this}}const C=async e=>{const{query:t,variables:s,fetchOptions:r}=e,a=k(T(e.method??"post")),i=Array.isArray(e.query),u=await a(e),n=await B(u,r.jsonSerializer??v),o=Array.isArray(n)?!n.some(({data:c})=>!c):!!n.data,l=Array.isArray(n)||!n.errors||Array.isArray(n.errors)&&!n.errors.length||r.errorPolicy==="all"||r.errorPolicy==="ignore";if(u.ok&&l&&o){const{errors:c,...d}=(Array.isArray(n),n),f=r.errorPolicy==="ignore"?d:n;return{...i?{data:f}:f,headers:u.headers,status:u.status}}else{const c=typeof n=="string"?{error:n}:n;throw new m({...c,status:u.status,headers:u.headers},{query:t,variables:s})}},B=async(e,t)=>{let s;return e.headers.forEach((r,a)=>{a.toLowerCase()==="content-type"&&(s=r)}),s&&(s.toLowerCase().startsWith("application/json")||s.toLowerCase().startsWith("application/graphql+json")||s.toLowerCase().startsWith("application/graphql-response+json"))?t.parse(await e.text()):e.text()},A=e=>typeof e=="function"?e():e,V=(e,...t)=>e.reduce((s,r,a)=>`${s}${r}${a in t?t[a]:""}`,"");export{K as G,V as g};
