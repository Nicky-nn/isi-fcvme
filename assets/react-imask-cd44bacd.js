import{I as p}from"./imask-292dab86.js";import{e as o}from"./react-19ede8c0.js";import{P as e}from"./prop-types-082dc46a.js";function f(s){if(s==null)throw new TypeError("Cannot destructure "+s)}function m(s,a){if(s==null)return{};var r={},t=Object.keys(s),n,i;for(i=0;i<t.length;i++)n=t[i],!(a.indexOf(n)>=0)&&(r[n]=s[n]);return r}const u={mask:e.oneOfType([e.array,e.func,e.string,e.instanceOf(RegExp),e.oneOf([Date,Number,p.Masked]),e.instanceOf(p.Masked)]),value:e.any,unmask:e.oneOfType([e.bool,e.oneOf(["typed"])]),prepare:e.func,validate:e.func,commit:e.func,overwrite:e.oneOfType([e.bool,e.oneOf(["shift"])]),eager:e.oneOfType([e.bool,e.oneOf(["append","remove"])]),skipInvalid:e.bool,onAccept:e.func,onComplete:e.func,placeholderChar:e.string,displayChar:e.string,lazy:e.bool,definitions:e.object,blocks:e.object,pattern:e.string,format:e.func,parse:e.func,autofix:e.oneOfType([e.bool,e.oneOf(["pad"])]),radix:e.string,thousandsSeparator:e.string,mapToRadix:e.arrayOf(e.string),scale:e.number,signed:e.bool,normalizeZeros:e.bool,padFractionalZeros:e.bool,min:e.oneOfType([e.number,e.instanceOf(Date)]),max:e.oneOfType([e.number,e.instanceOf(Date)]),dispatch:e.func,inputRef:e.oneOfType([e.func,e.shape({current:e.object})])},c=Object.keys(u).filter(s=>s!=="value"),h=["value","unmask","onAccept","onComplete","inputRef"],k=c.filter(s=>h.indexOf(s)<0);function d(s){const a=class extends o.Component{constructor(t){super(t),this._inputRef=this._inputRef.bind(this)}componentDidMount(){this.props.mask&&this.initMask()}componentDidUpdate(){const t=this.props,n=this._extractMaskOptionsFromProps(t);n.mask?this.maskRef?(this.maskRef.updateOptions(n),"value"in t&&(this.maskValue=t.value)):this.initMask(n):(this.destroyMask(),"value"in t&&(this.element.value=t.value))}componentWillUnmount(){this.destroyMask()}_inputRef(t){this.element=t,this.props.inputRef&&(Object.prototype.hasOwnProperty.call(this.props.inputRef,"current")?this.props.inputRef.current=t:this.props.inputRef(t))}initMask(){let t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:this._extractMaskOptionsFromProps(this.props);this.maskRef=p(this.element,t).on("accept",this._onAccept.bind(this)).on("complete",this._onComplete.bind(this)),"value"in this.props&&(this.maskValue=this.props.value)}destroyMask(){this.maskRef&&(this.maskRef.destroy(),delete this.maskRef)}_extractMaskOptionsFromProps(t){const n=Object.assign({},(f(t),t));return Object.keys(n).filter(i=>k.indexOf(i)<0).forEach(i=>{delete n[i]}),n}_extractNonMaskProps(t){const n=t,i=Object.assign({},(f(n),n));return c.forEach(l=>{delete i[l]}),"defaultValue"in i||(i.defaultValue=t.mask?"":i.value),delete i.value,i}get maskValue(){return this.props.unmask==="typed"?this.maskRef.typedValue:this.props.unmask?this.maskRef.unmaskedValue:this.maskRef.value}set maskValue(t){t=t==null&&this.props.unmask!=="typed"?"":t,this.props.unmask==="typed"?this.maskRef.typedValue=t:this.props.unmask?this.maskRef.unmaskedValue=t:this.maskRef.value=t}_onAccept(t){this.props.onAccept&&this.maskRef&&this.props.onAccept(this.maskValue,this.maskRef,t)}_onComplete(t){this.props.onComplete&&this.maskRef&&this.props.onComplete(this.maskValue,this.maskRef,t)}render(){return o.createElement(s,Object.assign({},this._extractNonMaskProps(this.props),{inputRef:this._inputRef}))}},r=s.displayName||s.name||"Component";return a.displayName="IMask(".concat(r,")"),a.propTypes=u,o.forwardRef((t,n)=>o.createElement(a,Object.assign({},t,{ref:n})))}const O=["inputRef"],R=d(s=>{let{inputRef:a}=s,r=m(s,O);return o.createElement("input",Object.assign({},r,{ref:a}))}),y=(s,a)=>o.createElement(R,Object.assign({},s,{ref:a})),g=o.forwardRef(y);export{g as I};
